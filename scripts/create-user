#!/usr/bin/env python
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

from urllib import quote_plus
import json
import os
import subprocess
import sys

ROOT = os.path.abspath('%s/../..' % os.path.dirname(__file__))
STATE_FILENAME = ROOT + "/dev/env/state.json"
BUGZILLA_USER = 'admin@example.com'
BUGZILLA_PASS = 'password'
LDAP_USER = 'cn=admin,dc=mozilla'
LDAP_PASS = 'password'


def main(args):
    if 'VIRTUAL_ENV' in os.environ:
        raise Exception("you cannot run this script from within "
                        "the virtual environment")
    old_os_path = os.environ['PATH']
    old_sys_path = list(sys.path)
    old_prefix = sys.prefix
    activate = ROOT + "/dev/venv/bin/activate_this.py"
    execfile(activate, dict(__file__=activate))
    sys.executable = ROOT + "/dev/venv/bin/python"

    import bugsy
    import requests
    import ldap
    from vcttesting.ldap import LDAP
    from vcttesting.bugzilla import Bugzilla

    if len(args) != 5:
        print("syntax: create-user "
              "<email> <password> <username> <real name> <scm-level>")
        print("    eg: create-user "
              "glob@example.com password glob 'glob jones' 3")
        print("- the password must be at least 8 characters long")
        print("- scm-level must be an integer between 0 and 3 inclusive")
        sys.exit(1)
    email, password, username, fullname, scm_level = args

    # validate args

    if '@' not in email:
        raise Exception("invalid email address")
    if len(password) < 8:
        raise Exception("invalid password: must be at least 8 characters long")

    if ':' not in fullname:
        # ensure the irc nick alias is in the bugzilla full name
        fullname += " (:%s)" % username

    try:
        scm_level = int(scm_level)
        if scm_level < 0 or scm_level > 3:
            raise Exception("aiee")
        if scm_level == 0:
            scm_level = None
    except Exception:
        print("invalid scm_level: "
              "must be an integer between 0 and 3 inclusive")
        sys.exit(1)

    # load state

    if not os.path.isfile(STATE_FILENAME):
        print("Failed to find state.json: "
              "ensure vagrant has provisioned the vm")
        sys.exit(1)
    with open(STATE_FILENAME) as state_file:
        state = json.load(state_file)
    if 'users' not in state:
        state['users'] = {}

    print('creating user %s "%s" scm-level %s' % (email, fullname, scm_level))

    # bugzilla

    # XXX once this is part of vct, add get_user to vcttesting.bugzilla
    # and remove bz_rest
    bz_rest = bugsy.Bugsy(
        username=BUGZILLA_USER,
        password=BUGZILLA_PASS,
        bugzilla_url='%srest/' % state['bugzilla']
    )
    bz_xmlrpc = Bugzilla(state['bugzilla'], BUGZILLA_USER, BUGZILLA_PASS)

    try:
        bz_rest.request('/user/%s' % quote_plus(email))
        exists = True
    except Exception:
        # bugsy doesn't expose bugzilla's error code, so assume any
        # failure is "no such user"
        exists = False
        if email in state['users']:
            del state['users'][email]
    if not exists:
        print("creating %s in bugzilla" % email)
        bz_xmlrpc.create_user(email, password, fullname)
        bz_xmlrpc.add_user_to_group(email, 'editbugs')

    if email not in state['users']:
        state['users'][email] = {}
    state['users'][email]['password'] = password
    state['users'][email]['username'] = username
    if 'id' not in state['users'][email]:
        response = bz_rest.request('/user/%s' % quote_plus(email))
        state['users'][email]['id'] = response['users'][0]['id']
    uid = state['users'][email]['id']

    # XXX validate api-key, and create a new one if required

    if 'apikey' not in state['users'][email]:
        print("creating bugzilla api-key")
        api_key = subprocess.check_output(
            ['/bugzilla/scripts/issue-api-key.pl', email]).strip()
        state['users'][email]['apikey'] = api_key
    else:
        api_key = state['users'][email]['apikey']

    bz_rest.request('/login?login=%s&password=%s'
                    % (quote_plus(email), quote_plus(password)))

    with open(STATE_FILENAME, 'w') as state_file:
        json.dump(state, state_file, indent=2, sort_keys=True)

    # review board

    print("linking %s with review board" % email)

    url = state['reviewboard'] + 'mozreview/bmo_auth_callback/'
    data = {'client_api_login': email, 'client_api_key': api_key}
    response = requests.post(url, data=json.dumps(data))
    if response.status_code != 200:
        raise Exception('bmo_auth_callback setup failed')
    result = response.json()['result']
    params = {'client_api_login': email, 'callback_result': result}
    response = requests.get(url, params=params)
    if response.status_code != 200:
        raise Exception('bmo_auth_callback result failed')

    # ldap

    print("adding %s ('%s' uid %d) to ldap" % (email, username, uid))

    # XXX once this is part of vct, add delete_user to vcttesting.ldap
    # and remove the direct ldap calls

    # it's easier to delete then recreate an ldap user
    l = ldap.initialize('ldap://localhost:389')
    l.simple_bind(LDAP_USER, LDAP_PASS)
    key_filename = "/src/dev/env/keys/%s" % email

    try:
        l.delete_s('mail=%s,o=com,dc=mozilla' % email)
    except ldap.NO_SUCH_OBJECT:
        pass
    for level in range(1, 3):
        modlist = [(ldap.MOD_DELETE, b'memberUid', email)]
        try:
            l.modify_s('cn=scm_level_%s,ou=groups,dc=mozilla' % level, modlist)
        except ldap.NO_SUCH_ATTRIBUTE:
            pass
    try:
        os.unlink(key_filename)
    except:
        pass

    l = LDAP('ldap://localhost:389/', LDAP_USER, LDAP_PASS)
    l.create_user(email, username, uid, fullname,
                  key_filename=key_filename, scm_level=scm_level)

    # local user

    print("creating local user")

    if scm_level is None:
        group = 'nobody'
        groups = ""
    else:
        group = 'scm_level_%d' % scm_level
        group_list = []
        l = scm_level - 1
        while l > 0:
            group_list.append("scm_level_%d" % l)
            l -= 1
        groups = ",".join(group_list)

    try:
        # we have to drop out of the virtualenv to access the selinux module
        # urgh
        os.environ['PATH'] = old_os_path
        sys.prefix = old_prefix
        sys.path[:0] = old_sys_path

        subprocess.check_output(
            ['ansible-playbook', '/src/dev/scripts/create-user.yml',
             '--extra-var',
             "username=%s email=%s group=%s grouplist='%s' "
             "key={{ lookup('file','%s.pub') }}"
             % (username, email, group, groups, key_filename)]
        )
    except subprocess.CalledProcessError as e:
        print(e.output)
        sys.exit(1)

    #

    print("done")

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
